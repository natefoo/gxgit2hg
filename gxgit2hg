#!/bin/bash

[ -n "$DEBUG" ] && set -xv

if [ -z "$4" ]; then
    echo "usage: gxgit2hg GITREPO GITBRANCH HGREPO HGBRANCH"
    exit 2
fi

here=$(readlink -f $(dirname $0))

gxgit=$(readlink -f $1)
gxhg=$(readlink -f $3)
git_branch="$2"
hg_branch="$4"
mutex="${here}/.git2hg.mutex"

for repo in $gxgit $gxhg; do
    if [ ! -e $repo ]; then
        echo "$repo does not exist"
        exit 1
    fi
done

if [ -e $mutex ]; then
    echo "$mutex exists, did a previous execution fail?"
    exit 1
fi

echo $$ >$mutex

# This process works as long as you don't have commits that appear more than
# once in the same branch. This happens with things like cherry-picking to a
# release branch and then merging release back to dev.
#
# A different process can be used when that is the case, e.g.:
#
# git checkout -b fixdev dev
# git rebase ${lasthead}
# git format-patch ...
# git checkout dev
# git branch -d fixdev
# git gc --prune=now
#
# It's ugly, but it does fold the duplicate commits into a single commit on
# fixdev.

python -c 'import dateutil' &&
cd $gxgit &&
lasthead=$(git rev-parse HEAD) &&
tmpdir=$(mktemp -d) &&
echo "previous HEAD was ${lasthead}" &&
git checkout $git_branch &&
git pull --ff-only &&
echo "writing patches to $tmpdir" &&
git format-patch -k -o $tmpdir $lasthead &&
ls $tmpdir &&
( for patch in $tmpdir/*; do
    ${here}/gxgit-patch-to-hg-patch $patch || false || exit
done ) &&
cd $gxhg &&
hg pull &&
hg update $hg_branch &&
hg import $tmpdir/* &&
hg out &&
#rm -rf $tmpdir &&
#hg push &&
rm $mutex
